""" Defines a scalar to upload images """
scalar Upload

""" Defines a scalar for date and time """
scalar DateTime

""" Defines to GraphQL Queries """
type Query {
    """ Returns a list of Users """
    users : [User!]!


    """ Returns the specified User """
    user(userID : ID!) : User


    """ Returns a list of Surveys (Optional: query surveys for specific QuestionType's)"""
    surveys : [Survey!]!


    """ Returns the specified Survey """
    survey(surveyID : ID!) : Survey


    """ Returns the specified Question """
    question(questionID : ID!) : Question


    """ Returns the specified Vote """
    vote(voteID : ID!) : Vote


    """ Returns a list of Contexts the user is allowed to see """
    contexts : [Context!]!


    """ Returns the specified Context """
    context(contextID : ID!) : Context


    """  Returns a list of Devices """
    devices : [Device!]!


    """ Returns the specified Device """
    device(deviceID : ID!) : Device


    """ Returns the specified ImageData """
    image(imageID : ID!) : ImagePayload
}

""" Defines the GraphQL Mutations """
type Mutation {
    """ Creates a User and returns the created User data and AuthToken """
    createUser(data : UserCreateInput!) : UserCreatePayload!


    """ Updates the specified User and returns the updated User data """
    updateUser(data : UserUpdateInput!, userID : ID!) : UserUpdatePayload


    """ Deletes the specified User and returns the deleted User data """
    deleteUser(userID : ID!) : UserDeletePayload


    """ Login and returns the Login data (User & AuthToken) """
    login(data : LoginInput!) : LoginPayload!


    """ Creates a Survey and returns the created Survey data """
    createSurvey(data : SurveyCreateInput!) : SurveyCreatePayload!


    """ Updates the specified Survey and returns the updated Survey data """
    updateSurvey(data : SurveyUpdateInput!, surveyID : ID!) : SurveyUpdatePayload


    """ Deletes the specified Survey and returns the deleted Survey data """
    deleteSurvey(surveyID : ID!) : SurveyDeletePayload


    """ Creates a Question and returns the created Question data """
    createLikeQuestion(data : LikeQuestionCreateInput!) : QuestionCreatePayload!


    """ Updates the specified Question and returns the updated Question data """
    updateLikeQuestion(data : LikeQuestionUpdateInput!, questionID : ID!) : QuestionUpdatePayload


    """ Creates a Question and returns the created Question data """
    createLikeDislikeQuestion(data : LikeDislikeQuestionCreateInput!) : QuestionCreatePayload!


    """ Updates the specified Question and returns the updated Question data """
    updateLikeDislikeQuestion(data : LikeDislikeQuestionUpdateInput!, questionID : ID!) : QuestionUpdatePayload


    """ Creates a Question and returns the created Question data """
    createChoiceQuestion(data : ChoiceQuestionCreateInput!,) : QuestionCreatePayload!


    """ Updates the specified Question and returns the updated Question data """
    updateChoiceQuestion(data : ChoiceQuestionUpdateInput!, questionID : ID!) : QuestionUpdatePayload


    """ Creates a Question and returns the created Question data """
    createRegulatorQuestion(data : RegulatorQuestionCreateInput!) : QuestionCreatePayload!


    """ Updates the specified Question and returns the updated Question data """
    updateRegulatorQuestion(data : RegulatorQuestionUpdateInput!, questionID : ID!) : QuestionUpdatePayload


    """ Creates a Question and returns the created Question data """
    createRankingQuestion(data : RankingQuestionCreateInput!) : QuestionCreatePayload!


    """ Updates the specified Question and returns the updated Question data """
    updateRankingQuestion(data : RankingQuestionUpdateInput!, questionID : ID!) : QuestionUpdatePayload


    """ Creates a Question and returns the created Question data """
    createFavoriteQuestion(data : FavoriteQuestionCreateInput!) : QuestionCreatePayload!


    """ Updates the specified Question and returns the updated Question data """
    updateFavoriteQuestion(data : FavoriteQuestionUpdateInput!, questionID : ID!) : QuestionUpdatePayload


    """ Deletes the specified Question and returns the deleted Question data """
    deleteQuestion(questionID : ID!) : QuestionDeletePayload


    """ Creates a Context and returns the created Context data """
    createContext(data : ContextCreateInput) : ContextCreatePayload!


    """ Updates the specified Context and returns the updated Context data """
    updateContext(data : ContextUpdateInput!, contextID : ID!) : ContextUpdatePayload


    """ Deletes the specified Context and returns the deleted Context data """
    deleteContext(contextID : ID!) : ContextDeletePayload


    """ Updates the specified Device and returns the Device data """
    updateDevice(data : DeviceUpdateInput!, deviceID : ID!) : DeviceUpdatePayload


    """ Deletes the specified Device and returns the Device data """
    deleteDevice(deviceID : ID!) : DeviceDeletePayload


    """ Creates a State for a controller and returns the created State data """
    createState(data : StateCreateInput!) : StateCreatePayload!


    """ Updates the specified State and returns the updated State data """
    updateState(data : StateUpdateInput!, contextID : String!) : StateUpdatePayload


    """ Deletes the specified State and returns the deleted State data """
    deleteState(data : StateDeleteInput!, contextID : String!) : StateDeletePayload


    """ Uploads an image and returns the ImageData """
    createImage(data : ImageCreateInput!, image : Upload!) : ImageCreatePayload!


    """ Deletes the specified ImageData and returns the ImageData """
    deleteImage(imageID : ID!) : ImageDeletePayload
}

""" Defines the GraphQL Subscriptions """
type Subscription {
    """ Subscribe a specific User """
    user(userID : ID!) : User!

    """ Subscribe a specific Survey """
    survey(surveyID : ID!) : Survey!

    """ Subscribe a specific Context """
    context(contextID : ID!) : Context!

    """ Subscribe a specific Device """
    device(deviceID : ID!) : Device!
}


""" Defines a user """
type User {
    """ the userID """
    _id : ID!

    """ the date of creation """
    creationDate : DateTime!

    """ the date of last update """
    lastUpdate : DateTime!

    """ the firstName """
    firstName : String!

    """ the lastName """
    lastName : String!

    """ the email """
    email : String!

    """ a list of devices """
    devices : [Device!]!

    """ a list of contexts """
    contexts : [Context!]!
}

""" Defines the input to create a user """
input UserCreateInput {

    """ the firstname """
    firstName : String!

    """ the lastname """
    lastName : String!

    """ the email """
    email : String!

    """ the password """
    password : String!
}

""" Define the payload to create a user """
type UserCreatePayload {

    """ the JWT """
    token : String!

    """ the user """
    user : User!
}

""" Defines the input to update a user """
input UserUpdateInput {

    """ the firstname """
    firstName : String

    """ the lastname """
    lastName : String

    """ the email """
    email : String

    """ the password """
    password : String
}

""" Defines the payload to update a user """
type UserUpdatePayload {

    """ the user """
    user : User!
}

""" Defines the payload to delete a user """
type UserDeletePayload {

    """ the user """
    user : User!
}

""" Defines the input to login a user """
input LoginInput {

    """ the users email """
    email : String!

    """ the users password """
    password : String!
}

""" Defines the payload to login """
type LoginPayload {

    """ the JWT """
    token : String!

    """ the user """
    user : User!
}


""" Defines a survey """
type Survey {
    """ Unique surveyID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The user that created this survey """
    creator : User!

    """ Title of the survey """
    title : String!

    """ Description of the survey """
    description : String!

    """ Flag to determine if everybody is allowed to display the survey """
    isPublic : Boolean!

    """ The QuestionType's this survey contains """
    types : [QuestionType!]!

    """ All the questions of the survey """
    questions : [Question!]!

    """ All the votes of the survey """
    votes : [Vote!]!

    """ All the controllers of the survey """
    contexts : [Context!]!

    """ All the images (ImageData) of the survey """
    images : [ImagePayload!]!
}

""" Defines the input to create a survey """
input SurveyCreateInput {

    """ the title """
    title : String!

    """ the description """
    description : String = ""

    """ flag if survey is public """
    isPublic : Boolean = false
}

""" Defines the payload to create a survey """
type SurveyCreatePayload {

    """ the survey data """
    survey: Survey!
}

""" Defines the input to update a survey """
input SurveyUpdateInput {

    """ the title """
    title : String

    """ the description """
    description : String

    """ flag if survey is public """
    isPublic : Boolean
}

""" Defines the payload to update a survey """
type SurveyUpdatePayload {

    """ the survey data """
    survey : Survey!
}

""" Defines the payload to delete a survey """
type SurveyDeletePayload {

    """ the survey data """
    survey : Survey!
}


""" Defines a Context representing a survey instance """
type Context {
    """ Unique controllerID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ Optional: The active question displayed by the controller """
    activeQuestion : Question

    """ Optional: The active survey handled by the controller """
    activeSurvey : Survey

    """ The users the device is connected to """
    owners : [User!]

    """ All devices connected to the controller """
    devices : [Device!]!

    """ The name of the controller """
    name : String!

    """ List of controller defined states """
    states : [State!]!
}

""" Defines the input to create a context """
input ContextCreateInput {

    """ the name """
    name : String!
}

""" Defines the payload to create a context """
type ContextCreatePayload {

    """ the context """
    context : Context!

    """ a token """
    token : String!
}

""" Defines the input to  """
input ContextUpdateInput {

    """ the active questionID """
    activeQuestion : ID

    """ the active surveyID """
    activeSurvey : ID

    """ the context name """
    name : String

    """ a list of owners """
    owner : [ID!]
}

""" Defines the payload to update a context """
type ContextUpdatePayload {

    """ the context data """
    context : Context!
}

""" Defines the payload to delete a context """
type ContextDeletePayload {

    """ the context data """
    context : Context!
}

""" Key-value pairs representing a client state """
type State {

    """ the key """
    key : String!

    """ the value """
    value : String!
}

""" Defines the input to create a state """
input StateCreateInput {

    """ the associated contextID """
    contextID : String!

    """ the key """
    key : String!

    """ the value """
    value : String!
}

""" Defines the payload to create a state """
type StateCreatePayload {

    """ the state """
    state : State!
}

""" Defines the input to update a state """
input StateUpdateInput {

    """ the key """
    key : String!

    """ the value """
    value : String!
}

""" Defines the payload to update state """
type StateUpdatePayload {

    """ the state to update """
    state : State!
}

""" Defines the input to delete a state """
input StateDeleteInput {

    """ the key """
    key : String!
}

""" Defines the payload to delete state """
type StateDeletePayload {

    """ the state to delete """
    state : State!
}


""" Defines a device """
type Device {
    """ Unique deviceID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The name of the device """
    name : String!

    """ The context the device is connected to """
    context : Context

    """ The users the device is connected to """
    owners : [User!]

    """ Cache for the answers of one vote """
    answers : [Answer!]!
}

""" Defines the input to update a device """
input DeviceUpdateInput {

    """ the device name """
    name : String

    """ the associated context """
    context : ID

    """ a list of owners """
    owners : [ID!]
}

""" Defines the payload to update a device """
type DeviceUpdatePayload {

    """ the device data """
    device : Device!
}

""" Defines the payload to delete a device """
type DeviceDeletePayload {

    """ the device data """
    device : Device!
}


""" Defines attributes all questions need """
interface Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String
}

""" Defines a question of type Like """
type LikeQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ Default Like-Icon """
    likeIcon : ImagePayload!
}

""" Defines the input to create a question of type like """
input LikeQuestionCreateInput {

    """ the associated surveyID """
    surveyID : ID!

    """ the value """
    value : String!

    """ the description """
    description : String

    """ a list of items """
    items : [ItemCreateInput!]

    """ the imageID for the like icon """
    likeIcon : ID
}

""" Defines the input to update a question of type like """
input LikeQuestionUpdateInput {

    """ the value """
    value : String

    """ the description """
    description : String

    """ a list of items """
    items : [ItemCreateInput!]

    """ the imageiD for the like icon """
    likeIcon : ID
}

""" Defines a question of type Like & Dislike """
type LikeDislikeQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ Default like icon """
    likeIcon : ImagePayload!

    """ Default dislike icon """
    dislikeIcon : ImagePayload!
}

""" Defines the input to create a question of type like/dislike """
input LikeDislikeQuestionCreateInput {

    """ the associated """
    surveyID : ID!

    """ the value """
    value : String!

    """ the description """
    description : String

    """ the imageID for the like icon """
    likeIcon : ID

    """ the imageID for the dislike icon """
    dislikeIcon : ID

    """ a list of items """
    items : [ItemCreateInput!]
}

""" Defines the input to update question of type like/dislike """
input LikeDislikeQuestionUpdateInput {

    """ the new value """
    value : String

    """ the new description """
    description : String

    """ the imageID for a new like icon """
    likeIcon : ID

    """ the imageID for a new dislike icon """
    dislikeIcon : ID

    """ a new list of items """
    items : [ItemCreateInput!]
}

""" Defines a question with fixed set of choices """
type ChoiceQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ The descriptions of all possible choices """
    choices : [ChoiceDescription!]!

    """ Optional: The code of the choice that is selected by default """
    default : String
}

""" Defines the input to create a choice """
input ChoiceQuestionCreateInput {

    """ the associated surveyID """
    surveyID : ID!

    """ the value """
    value : String!

    """ the description """
    description : String

    """ a list of choices """
    choices : [ChoiceDescriptionCreateInput!]!

    """ the default value """
    default : String

    """ a list of items """
    items : [ItemCreateInput!]
}

""" Defines the input to update a choice """
input ChoiceQuestionUpdateInput {

    """ the new value """
    value : String

    """ the new description """
    description : String

    """ a list of choices """
    choices : [ChoiceDescriptionCreateInput!]

    """ the default value """
    default : String

    """ a list of items """
    items : [ItemCreateInput!]
}

""" The description of a choice """
type ChoiceDescription {
    """ The label of a choice """
    label : String!

    """ Optional : The image that has to be shown for a choice """
    image : ImagePayload

    """ Unique String representing each choice """
    code : String!
}

""" Defines the input to create a choice description """
input ChoiceDescriptionCreateInput {

    """ the description """
    label : String!

    """ the image data """
    image : ID
}

""" Defines a question of type Like """
type RegulatorQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ The labels that need to be visualized (only for visual feedback and orientation) """
    labels : [Label!]!

    """ The distance between every selectable step of the regulator """
    stepSize : Float!

    """ The minimum value for the regulator """
    min : Float!

    """ The maximum value for the regulator """
    max : Float!

    """ The default value the regulator has to start at """
    default : Float!
}

""" Defines the input to create a question of type regulator """
input RegulatorQuestionCreateInput {

    """ the associated surveyID """
    surveyID : ID!

    """ the value """
    value : String!

    """ the description """
    description : String

    """ a list of labels """
    labels : [LabelCreateInput!]!

    """ the stepsize """
    stepSize : Float!

    """ the minimum value """
    min : Float!

    """ the maximum value """
    max : Float!

    """ the default value """
    default : Float!

    """ a list of items """
    items : [ItemCreateInput!]
}

""" Defines the input to update a question of type regulator """
input RegulatorQuestionUpdateInput {

    """ the new value """
    value : String

    """ the new description """
    description : String

    """ a new list of labels """
    labels : [LabelCreateInput!]

    """ a new stepsize """
    stepSize : Float

    """" the new minimum """
    min : Float

    """ the new maximum """
    max : Float

    """ the new default value """
    default : Float

    """ a new list of items """
    items : [ItemCreateInput!]
}

""" The description of steps that are important for orientation / understanding (distributed in a linear way) """
type Label {
    """ The text of a label """
    text : String!

    """ The image that has to be shown for a label """
    image : ImagePayload

    """ The value a label belongs to (has to be placed at) """
    value : Float!
}

""" Defines the input to create a label """
input LabelCreateInput {

    """ the label text """
    text : String!

    """ the label image """
    image : ID

    """ the label value """
    value : Float!
}

""" Defines a question in which multiple images need to get ranked """
type RankingQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ Items / Images that need to be shown """
    items : [Item!]!
}

""" Defines the input to create a question of type ranking  """
input RankingQuestionCreateInput {

    """ the associated surveyID """
    surveyID : ID!

    """ the value """
    value : String!

    """ the description """
    description : String

    """ a list of items """
    items : [ItemCreateInput!]!
}

""" Defines the input to update a question of type ranking """
input RankingQuestionUpdateInput {

    """ the new value """
    value : String

    """ the new description """
    description : String

    """ the updated list of items """
    items : [ItemCreateInput!]
}

""" Defines a question where a single image of a set is selected as favorite """
type FavoriteQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ Items / Images that need to be shown """
    items : [Item!]!
}

""" Defines the input to create a question of type favorite """
input FavoriteQuestionCreateInput {

    """ Defines the associated surveyID """
    surveyID : ID!

    """ The input value """
    value : String!

    """ The description """
    description : String

    """ A list of items """
    items : [ItemCreateInput!]
}

""" Defines the input to update a question of type favorite """
input FavoriteQuestionUpdateInput {

    """ the input value """
    value : String

    """ the new description """
    description : String

    """ a list of updated items """
    items : [ItemCreateInput!]
}

""" Defines the data of an item """
type Item {
    """ The ImageData of the image that needs to be shown """
    image : ImagePayload!

    """ The Label that describes the image depending on the context """
    label : String!

    """ Unique String representing each item """
    code : String!
}

""" Defines input to create an item """
input ItemCreateInput {

    """ the image data """
    image : ID!

    """ the item label """
    label : String!
}

""" Defines the payload to create a question """
type QuestionCreatePayload {

    """ Defines the survey to create """
    survey: Survey!
}

""" Defines the payload to delete a question """
type QuestionUpdatePayload {

    """ Defines the survey to update """
    survey : Survey!
}

""" Defines the payload to delete a question """
type QuestionDeletePayload {

    """ Defines the survey to delete """
    survey : Survey!
}


""" Defines a single vote for a survey """
type Vote {
    """ Unique voteID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The controller a vote was send by """
    context : Context!

    """ The survey a vote belongs to """
    survey : Survey!

    """ A votes answers to all questions of the survey """
    answers : [Answer!]!
}

""" Defines the answer for a question """
interface Answer {
    """ The question an answer belongs to """
    question : Question!
}

""" Defines the answer for a Like type question """
type LikeAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ True = liked, False = skipped """
    liked : Boolean!
}

""" Defines the answer for a Like & Dislike type question """
type LikeDislikeAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ True = liked, False = disliked """
    liked : Boolean!
}

""" Defines the answer for a Choice type question """
type ChoiceAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ The code of the selected choice """
    code : String!
}

""" Defines the answer for a Regulator type question """
type RegulatorAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ The selected value of the regulator """
    rating : Float!

    """ The normalized value of the regulator """
    normalized : Float!
}

""" Defines the answer for a Like type question """
type RankingAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ The codes of all the item sorted by ranking (first = best, last = worst) """
    codes : [String!]!
}

""" Defines the answer for a Favorite type question """
type FavoriteAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ The code of the favorite item """
    code : String!
}


### ImageData ###
""" Defines the data representing an image """
type ImageData{
    """ Unique imageID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The name of the image """
    name : String!

    """ The mimetype of the image """
    type : String!

    """ The hash identifying the image """
    hash : String!

    """ Tags this image is represented through """
    tags : [String!]!
}

""" Defines the Payload for Image Data """
type ImagePayload {

    """ Defines the image data """
    data : ImageData!

    """ The URL an image can be downloaded from """
    url : String!
}

""" Defines the input to create an image """
input ImageCreateInput {

    """ Defines an associted surveyID for the image """
    surveyID : ID!

    """ Defines a list of tags for the image """
    tags : [String!]
}

""" Defines the payload to create an image """
type ImageCreatePayload {

    """ Defines the image data """
    image : ImagePayload!
}

""" Defines the payload to delete an image """
type ImageDeletePayload {

    """ Defines the image data """
    image : ImageData!
}

""" Defines different types of questions """
enum QuestionType {
    """ Represents a question where you can choose an option """
    CHOICE
    """ Represents a question where you can favorite an option """
    FAVORITE
    """ Represents a question where you can like an option """
    LIKE
    """ Represents a question where you can like and dislike an option """
    LIKEDISLIKE
    """ Represents a question where you can rank an option """
    RANKING
    """ Represents a question where you can regulate an option """
    REGULATOR
}