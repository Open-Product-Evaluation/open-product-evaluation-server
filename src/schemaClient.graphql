scalar DateTime

type Query {
    #TODO: think of pagination and more query options
    """ Returns a list of public Contexts (Optional: query context for specific QuestionType's)"""
    contexts(types : [QuestionType!]) : [Context!]!


    """ Returns the specified Context """
    context(contextID : ID!) : Context


    """ Returns the specified Device """
    device(deviceID : ID!) : Device


    """ Returns the specified ImageData """
    image(imageID : ID!) : ImagePayload
}

type Mutation {
    """ Updates the specified Context and returns the Context data """
    updateContext(data : ContextUpdateInput!, contextID : ID!) : ContextUpdatePayload


    """ Creates a Device and returns the created Device data """
    createDevice(data : DeviceCreateInput!) : DeviceCreatePayload!


    """ Updates the specified Device and returns the updated Device data """
    updateDevice(data : DeviceUpdateInput!, deviceID : ID!) : DeviceUpdatePayload


    """ Deletes the specified Device and returns the deleted Device data """
    deleteDevice(deviceID : ID!) : DeviceDeletePayload


    """ Creates a State for a controller and returns the created State data """
    createState(data : StateCreateInput!) : StateCreatePayload!


    """ Updates the specified State and returns the updated State data """
    updateState(data : StateUpdateInput!, contextID : String!) : StateUpdatePayload


    """ Deletes the specified State and returns the deleted State data """
    deleteState(data : StateDeleteInput!, contextID : String!) : StateDeletePayload


    """ Creates an Answer for a Question and a specific Device. Returns the created Answer data """
    createAnswer(data : AnswerCreateInput!) : AnswerCreatePayload!


    """ Updates an Answer for a Question and a specific Device. Returns the updated Answer data """
    updateAnswer(data : AnswerUpdateInput!, contextID : ID!, deviceID : ID!, questionID : ID!) : Answer


    """ Deletes an Answer for a Question and a specific Device. Returns the deleted Answer data """
    deleteAnswer(contextID : ID!, deviceID : ID!, questionID : ID!) : AnswerDeletePayload

    """ Creates a Vote and returns the created Vote data """
    createVote(data : VoteCreateInput!) : VoteCreatePayload!
}

type Subscription {
    """ Subscribe a specific Survey """
    survey(surveyID : ID!) : Survey!

    """ Subscribe a specific Context """
    context(contextID : ID!) : Context!

    """ Subscribe a specific Device """
    device(deviceID : ID!) : Device!
}


### Survey ###
""" Defines a survey """
type Survey {
    """ Unique surveyID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ Title of the survey """
    title : String!

    """ Description of the survey """
    description : String!

    """ Flag to determine if everybody is allowed to display the survey """
    public : Boolean!

    """ The QuestionType's this survey contains """
    types : [QuestionType!]!

    """ All the questions of the survey """
    questions : [Question!]!

    """ All the votes of the survey """
    votes : [Vote!]!

    """ All the images (ImageData) of the survey """
    images : [ImagePayload!]!
}


### Controller ###
""" Defines a controller representing a survey instance """
type Context {
    """ Unique controllerID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ Flag if the Context can be seen by everyone or if you need to know the contextID to see it"""
    public : Boolean!

    """ Optional: The active question displayed by the controller """
    activeQuestion : Question

    """ Optional: The active survey handled by the controller """
    activeSurvey : Survey

    """ All devices connected to the controller """
    devices : [Device!]!

    """ The name of the controller """
    name : String!

    """ List of controller defined states """
    states : [State!]!
}

input ContextUpdateInput {
    activeQuestion : ID
}

type ContextUpdatePayload {
    context : Context!
}


""" Key-value pairs representing a client state """
type State {
    key : String!
    value : String!
}

input StateCreateInput {
    contextID : String!
    key : String!
    value : String!
}

type StateCreatePayload {
    state : State!
}

input StateUpdateInput {
    key : String!
    value : String!
}

type StateUpdatePayload {
    state : State!
}

input StateDeleteInput {
    key : String!
}

type StateDeletePayload {
    state : State!
}


### Device ###
""" Defines a device """
type Device {
    """ Unique deviceID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The name of the device """
    name : String!

    """ The controller the device is connected to """
    context : Context

    """ Cache for the answers of one vote """
    answers : [Answer!]!
}

input DeviceCreateInput {
    name : String!
}

type DeviceCreatePayload {
    device : Device!
    token : String!
}

input DeviceUpdateInput {
    name : String
    context : ID
    owners : [ID!]
}

type DeviceUpdatePayload {
    device : Device!
}

type DeviceDeletePayload {
    device : Device!
}


### Question ###
""" Defines attributes all questions need """
interface Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String
}

""" Defines a question of type Like """
type LikeQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ Default Like-Icon """
    likeIcon : ImagePayload!
}

""" Defines a question of type Like & Dislike """
type LikeDislikeQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ Default like icon """
    likeIcon : ImagePayload!

    """ Default dislike icon """
    dislikeIcon : ImagePayload!
}

""" Defines a question with fixed set of choices """
type ChoiceQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ The descriptions of all possible choices """
    choices : [ChoiceDescription!]!

    """ Optional: The code of the choice that is selected by default """
    default : String
}

""" The description of a choice """
type ChoiceDescription {
    """ The label of a choice """
    label : String!

    """ Optional : The image that has to be shown for a choice """
    image : ImagePayload

    """ Unique String representing each choice """
    code : String!
}

""" Defines a question of type Like """
type RegulatorQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ Items / Images that need to be shown """
    items : [Item!]!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ The labels that need to be visualized (only for visual feedback and orientation) """
    labels : [Label!]!

    """ The distance between every selectable step of the regulator """
    stepSize : Float!

    """ The minimum value for the regulator """
    min : Float!

    """ The maximum value for the regulator """
    max : Float!

    """ The default value the regulator has to start at """
    default : Float!
}

""" The description of steps that are important for orientation / understanding (distributed in a linear way) """
type Label {
    """ The text of a label """
    text : String!

    """ The image that has to be shown for a label """
    image : ImagePayload

    """ The value a label belongs to (has to be placed at) """
    value : Float!
}

""" Defines a question in which multiple images need to get ranked """
type RankingQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ Items / Images that need to be shown """
    items : [Item!]!
}

""" Defines a question where a single image of a set is selected as favorite """
type FavoriteQuestion implements Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The survey this question belongs to """
    survey : Survey!

    """ The type of the question """
    type : QuestionType!

    """ The question text / the question itself """
    value : String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ Items / Images that need to be shown """
    items : [Item!]!
}

""" Defines the data of an item """
type Item {
    """ The ImageData of the image that needs to be shown """
    image : ImagePayload!

    """ The Label that describes the image depending on the context """
    label : String!

    """ Unique String representing each item """
    code : String!
}

### Vote ###
""" Defines a single vote for a survey """
type Vote {
    """ Unique voteID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The controller a vote was send by """
    context : Context!

    """ The survey a vote belongs to """
    survey : Survey!

    """ A votes answers to all questions of the survey """
    answers : [Answer!]!
}

input VoteCreateInput {
    contextID : ID!
    deviceID : ID!
}

type VoteCreatePayload {
    vote : Vote!
}

""" Defines the answer for a question """
interface Answer {
    """ The question an answer belongs to """
    question : Question!
}

""" Defines the answer for a Like type question """
type LikeAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ True = liked, False = skipped """
    liked : Boolean!
}

""" Defines the answer for a Like & Dislike type question """
type LikeDislikeAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ True = liked, False = disliked """
    liked : Boolean!
}

""" Defines the answer for a Choice type question """
type ChoiceAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ The code of the selected choice """
    choiceCode : String!
}

""" Defines the answer for a Regulator type question """
type RegulatorAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ The selected value of the regulator """
    rating : Float!

    """ The normalized value of the regulator """
    normalized : Float!
}

""" Defines the answer for a Like type question """
type RankingAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ The codes of all the item sorted by ranking (first = best, last = worst) """
    rankedCodes : [String!]!
}

""" Defines the answer for a Favorite type question """
type FavoriteAnswer implements Answer {
    """ The question an answer belongs to """
    question : Question!

    """ The code of the favorite item """
    favoriteCode : String!
}

input AnswerCreateInput {
    contextID : ID!
    deviceID : ID!
    questionID : ID!
    itemCode : String
    liked : Boolean
    choiceCode : String
    rankedItemCodes : [String!]
    rating : Float
}

type AnswerCreatePayload {
    answer : Answer!
}

input AnswerUpdateInput {
    itemCode : String
    liked : Boolean
    choiceCode : String
    rankedItemCodes : [String!]
    rating : Float
}

type AnswerUpdatePayload {
    answer : Answer!
}

type AnswerDeletePayload {
    answer : Answer!
}


### ImageData ###
""" Defines the data representing an image """
type ImageData{
    """ Unique imageID """
    _id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The name of the image """
    name : String!

    """ The mimetype of the image """
    type : String!

    """ The hash identifying the image """
    hash : String!

    """ Tags this image is represented through """
    tags : [String!]!
}

type ImagePayload {
    """ The informations / detailed data of a specific image """
    data : ImageData!

    """ The URL an image can be downloaded from """
    url : String!
}

enum QuestionType {
    CHOICE
    FAVORITE
    LIKE
    LIKEDISLIKE
    RANKING
    REGULATOR
}