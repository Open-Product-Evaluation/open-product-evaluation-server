""" Defines the GraphQL Mutations """
type Mutation {
    """
    * __Roles:__ Admin / User
    * __Function:__ Creates the skeletal structure of a question and adds it to the specified survey
        * _**Admin:**_ Can create questions in every survey
        * _**User:**_ Can only create questions in owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the survey this question should be added to was not found
        * the survey this question should be added is not inactive
        * a standard user tries to add a question to a survey he does not own
    """
    createQuestion(data : QuestionCreateInput!) : QuestionCreatePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Updates a question
        * _**Admin:**_ Can update all questions
        * _**User:**_ Can only update questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified question was not found
        * a standard user tries to update the question of another user's survey
        * the survey containing this question is not inactive
    """
    updateQuestion(data : QuestionUpdateInput!, questionID : HashID!) : QuestionUpdatePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Deletes a question
        * _**Admin:**_ Can delete all questions
        * _**User:**_ Can only delete questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified question was not found
        * a standard user tries to delete another user's surveys
        * the survey containing this question is not inactive
    """
    deleteQuestion(questionID : HashID!) : QuestionDeletePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Creates the skeletal structure of an item and adds it to the specified question
        * _**Admin:**_ Can create items in every question
        * _**User:**_ Can only create items in questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the question this item should be added to was not found
        * a standard user tries to add an item to the question of a survey he does not own
        * the survey containing this question is not inactive
    """
    createItem(data : ItemCreateInput!, questionID : HashID!) : ItemCreatePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Updates an item
        * _**Admin:**_ Can update all items
        * _**User:**_ Can only update items in questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified item or question were not found
        * a standard user tries to update an item in the question of another user's survey
        * the survey containing this question is not inactive
    """
    updateItem(data : ItemUpdateInput!, questionID : HashID!, itemID : HashID!) : ItemUpdatePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Deletes an item
        * _**Admin:**_ Can delete all items
        * _**User:**_ Can only delete items in questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified item or question were not found
        * a standard user tries to delete an item in the question of another user's survey
        * the survey containing this question is not inactive
    """
    deleteItem(questionID : HashID!, itemID : HashID!) : ItemDeletePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Sets an image for an item (to visualy represent it)
        * _**Admin:**_ Can set the image of every item
        * _**User:**_ Can only set the image of items, that belong to questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the question or item this image should be added to were not found
        * a standard user tries to set the image of an item, that belongs to the question of a survey he does not own
        * the provided file is not an image
        * the survey containing this question is not inactive
    """
    setItemImage(questionID : HashID!, itemID : HashID!, image : Upload!) : ItemImageSetPayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Removes the image of an item
        * _**Admin:**_ Can remove the image of every item
        * _**User:**_ Can only remove the image of items, that belong to questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the question or item this image should be removed from were not found
        * a standard user tries to remove the image of an item, that belongs to the question of a survey he does not own
        * the survey containing this question is not inactive
    """
    removeItemImage(questionID : HashID!, itemID : HashID!) : ItemImageRemovePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Creates the skeletal structure of a label and adds it to the specified question
        * _**Admin:**_ Can create labels in every question
        * _**User:**_ Can only create labels in questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the question this label should be added to was not found
        * a standard user tries to add a label to the question of a survey he does not own
        * the survey containing this question is not inactive
    """
    createLabel(data : LabelCreateInput!, questionID : HashID!) : LabelCreatePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Updates a label
        * _**Admin:**_ Can update all labels
        * _**User:**_ Can only update labels in questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified label or question were not found
        * a standard user tries to update a label in the question of another user's survey
        * the survey containing this question is not inactive
    """
    updateLabel(data : LabelUpdateInput!, questionID : HashID!, labelID : HashID!) : LabelUpdatePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Deletes a label
        * _**Admin:**_ Can delete all labels
        * _**User:**_ Can only delete labels in questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified label or question were not found
        * a standard user tries to delete a label in the question of another user's survey
        * the survey containing this question is not inactive
    """
    deleteLabel(questionID : HashID!, labelID : HashID!) : LabelDeletePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Sets an image for a label (to visualy represent it)
        * _**Admin:**_ Can set the image of every label
        * _**User:**_ Can only set the image of labels, that belong to questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the question or label this image should be added to were not found
        * a standard user tries to set the image of a label, that belongs to the question of a survey he does not own
        * the provided file is not an image
        * the survey containing this question is not inactive
    """
    setLabelImage(questionID : HashID!, labelID : HashID!, image : Upload!) : LabelImageSetPayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Removes the image of a label
        * _**Admin:**_ Can remove the image of every label
        * _**User:**_ Can only remove the image of labels, that belong to questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the question or label this image should be removed from were not found
        * a standard user tries to remove the image of a label, that belongs to the question of a survey he does not own
        * the survey containing this question is not inactive
    """
    removeLabelImage(questionID : HashID!, labelID : HashID!) : LabelImageRemovePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Creates the skeletal structure of a choice and adds it to the specified question
        * _**Admin:**_ Can create choices in every question
        * _**User:**_ Can only create choices in questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the question this choice should be added to was not found
        * a standard user tries to add a label to the question of a survey he does not own
        * the provided choice-code is not unique (in the specified question)
        * the survey containing this question is not inactive
    """
    createChoice(data : ChoiceDescriptionCreateInput!, questionID : HashID!) : ChoiceDescriptionCreatePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Updates a choice
        * _**Admin:**_ Can update all choices
        * _**User:**_ Can only update choices in questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified choice or question were not found
        * a standard user tries to update a choice in the question of another user's survey
        * the provided choice-code is not unique (in the specified question)
        * the survey containing this question is not inactive
    """
    updateChoice(data : ChoiceDescriptionUpdateInput!, questionID : HashID!, choiceID : HashID!) : ChoiceDescriptionUpdatePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Deletes a choice
        * _**Admin:**_ Can delete all choices
        * _**User:**_ Can only delete choices in questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified choice or question were not found
        * a standard user tries to delete a choice in the question of another user's survey
        * the survey containing this question is not inactive
    """
    deleteChoice(questionID : HashID!, choiceID : HashID!) : ChoiceDescriptionDeletePayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Sets an image for a choice (to visualy represent it)
        * _**Admin:**_ Can set the image of every choice
        * _**User:**_ Can only set the image of choices, that belong to questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the question or choice this image should be added to were not found
        * a standard user tries to set the image of a choice, that belongs to the question of a survey he does not own
        * the provided file is not an image
        * the survey containing this question is not inactive
    """
    setChoiceImage(questionID : HashID!, choiceID : HashID!, image : Upload!) : ChoiceImageSetPayload!

    """
    * __Roles:__ Admin / User
    * __Function:__ Removes the image of a choice
        * _**Admin:**_ Can remove the image of every choice
        * _**User:**_ Can only remove the image of choices, that belong to questions of owned surveys
    * __Error:__ Returns an error when
        * access rights are missing
        * the question or choice this image should be removed from were not found
        * a standard user tries to remove the image of a choice, that belongs to the question of a survey he does not own
        * the survey containing this question is not inactive
    """
    removeChoiceImage(questionID : HashID!, choiceID : HashID!) : ChoiceImageRemovePayload!
}

""" The question-object is represents the skeletal structure of single question inside of a survey. It is created by a user in the administration UI and filled with updates. The question interface defines shared attributes of every question type, which are extended by the attributes the specific question types need. """
interface Question {
    """ The unique identifier """
    id : HashID!

    """ The date of creation """
    creationDate : DateTime!

    """ The date of the last update """
    lastUpdate : DateTime!

    """ The type of this question """
    type : QuestionType!

    """ Items / Images that need to be shown to and evaluated by participants of the survey """
    items : [Item!]

    """ The question text / the question itself """
    value : String

    """ The description of this question, giving deeper insights about it """
    description : String
}

""" Represents a question where the participant can communicate that he / she liked something (or be neutral by answering with 'null') """
type LikeQuestion implements Question {
    """ The unique identifier """
    id : HashID!

    """ The date of creation """
    creationDate : DateTime!

    """ The date of the last update """
    lastUpdate : DateTime!

    """ The type of this question """
    type : QuestionType!

    """ Items / Images that need to be shown to and evaluated by participants of the survey """
    items : [Item!]

    """ The question text / the question itself """
    value : String

    """ The description of this question, giving deeper insights about it """
    description : String

    """ The like icon thats supposed to be shown by a client (if no is provided, a client should show a self defined default) """
    likeIcon : ImageData
}


""" Represents a question where the participant can communicate that he / she liked or disliked something (or be neutral by answering with 'null') """
type LikeDislikeQuestion implements Question {
    """ The unique identifier """
    id : HashID!

    """ The date of creation """
    creationDate : DateTime!

    """ The date of the last update """
    lastUpdate : DateTime!

    """ The type of this question """
    type : QuestionType!

    """ Items / Images that need to be shown to and evaluated by participants of the survey """
    items : [Item!]

    """ The question text / the question itself """
    value : String

    """ The description of this question, giving deeper insights about it """
    description : String

    """ The like icon thats supposed to be shown by a client (if no is provided, a client should show a self defined default) """
    likeIcon : ImageData

    """ The dislike icon thats supposed to be shown by a client (if no is provided, a client should show a self defined default) """
    dislikeIcon : ImageData
}


""" Represents a question where the participant can choose between different choices / answer options (or be neutral by answering with 'null') """
type ChoiceQuestion implements Question {
    """ The unique identifier """
    id : HashID!

    """ The date of creation """
    creationDate : DateTime!

    """ The date of the last update """
    lastUpdate : DateTime!

    """ The type of this question """
    type : QuestionType!

    """ Items / Images that need to be shown to and evaluated by participants of the survey """
    items : [Item!]

    """ The question text / the question itself """
    value : String

    """ The description of this question, giving deeper insights about it """
    description : String

    """ The data structures of every possible choice / answer option """
    choices : [ChoiceDescription!]

    """ The id of the choice that is selected as default (the selected one if a participant doesnt choose any other choice) """
    default : HashID
}


""" Represents a question where the participant can give a rating thats in between a minimum and maximum value (or be neutral by answering with 'null') """
type RegulatorQuestion implements Question {
    """ The unique identifier """
    id : HashID!

    """ The date of creation """
    creationDate : DateTime!

    """ The date of the last update """
    lastUpdate : DateTime!

    """ The type of this question """
    type : QuestionType!

    """ Items / Images that need to be shown to and evaluated by participants of the survey """
    items : [Item!]

    """ The question text / the question itself """
    value : String

    """ The description of this question, giving deeper insights about it """
    description : String

    """ Positional markers that need to be visualized at specific values of a slider / regulator (can be seen as breakpoints for giving visual / textual feedback and orientation) """
    labels : [Label!]

    """ The distance between every selectable step of the regulator """
    stepSize : Float

    """ The minimum value for the regulator """
    min : Float

    """ The maximum value for the regulator """
    max : Float

    """ The default value the regulator has to start at """
    default : Float
}

""" Represents a question where the participant can favorite one of the provided items (or be neutral by answering with 'null') """
type FavoriteQuestion implements Question {
    """ The unique identifier """
    id : HashID!

    """ The date of creation """
    creationDate : DateTime!

    """ The date of the last update """
    lastUpdate : DateTime!

    """ The type of this question """
    type : QuestionType!

    """ Items / Images that need to be shown to and evaluated by participants of the survey """
    items : [Item!]

    """ The question text / the question itself """
    value : String

    """ The description of this question, giving deeper insights about it """
    description : String
}

""" Represents a question where the participant can rank the provided items (or be neutral by answering with 'null') """
type RankingQuestion implements Question {
    """ The unique identifier """
    id : HashID!

    """ The date of creation """
    creationDate : DateTime!

    """ The date of the last update """
    lastUpdate : DateTime!

    """ The type of this question """
    type : QuestionType!

    """ Items / Images that need to be shown to and evaluated by participants of the survey """
    items : [Item!]

    """ The question text / the question itself """
    value : String

    """ The description of this question, giving deeper insights about it """
    description : String
}

""" Defines the input for creating a question """
input QuestionCreateInput {
    """ The unique identifier of the survey this question should be added to """
    surveyID : HashID!

    """ The question text / the question itself """
    value : String

    """ The description of this question, giving deeper insights about it """
    description : String

    """ The type of this question """
    type : QuestionType!

    """ The id of the question the new question needs to be placed after. If no id was provided, the new question gets placed at the end. """
    previousQuestionID: HashID
}

""" Defines the payload for creating a question """
type QuestionCreatePayload {
    """ The created question data structure """
    question : Question!
}

""" Defines the input for updating a question """
input QuestionUpdateInput {
    """ The prefered sequence of items (all present itemIDs need to be provided / not for adding new items) """
    itemOrder: [HashID!]

    """ The prefered sequence of choices (all present choiceIDs need to be provided / not for adding new choices) """
    choiceOrder: [HashID!]

    """ The prefered sequence of labels (all present labelIDs need to be provided / not for adding new labels) """
    labelOrder: [HashID!]

    """ The new question text / the question itself """
    value : String

    """ The new description of this question, giving deeper insights about it """
    description : String

    """ The new type of this question (changing the type will delete all type-specific attributes that got set before) """
    type : QuestionType!

    """ The new distance between every selectable step of the regulator """
    stepSize : Float

    """ The new minimum value for the regulator """
    min : Float

    """ The new maximum value for the regulator """
    max : Float

    """ The new default value the regulator has to start at """
    regulatorDefault : Float

    """ The id of the new choice that is selected as default (the selected one if a participant doesnt choose any other choice) """
    choiceDefault : HashID

    """ The new image that should be used as like icon """
    likeIcon : Upload

    """ The new image that should be used as dislike icon """
    dislikeIcon : Upload
}

""" Defines the payload for updating a question """
type QuestionUpdatePayload {

    """ The updated question data structure """
    question : Question!
}

""" Defines the payload to deleting a question """
type QuestionDeletePayload {

    """ A notification if the deletion was successfull """
    success : Boolean!
}

""" Defines the data structure of an item. Items represent subjects that need to be shown to and evaluated by participants of the survey """
type Item {
    """ The unique identifier """
    id : HashID!

    """ The data structure of the image that visualy represents the subject and needs to be shown """
    image : ImageData

    """ A text that explains / represents the subject and needs to be shown """
    label : String
}

""" Defines input for creating an item """
input ItemCreateInput {
    """ A text that explains / represents the subject and needs to be shown """
    label : String
}

""" Defines payload for creating an item """
type ItemCreatePayload {
    """ The created image data structure """
    item : Item!
}

""" Defines input for updating an item """
input ItemUpdateInput {
    """ A new text that explains / represents the subject and needs to be shown """
    label : String
}

""" Defines payload for updating an item """
type ItemUpdatePayload {
    """ The updated image data structure """
    item : Item!
}

""" Defines payload for deleting an item """
type ItemDeletePayload {
    """ A notification if the deletion was successfull """
    success : Boolean!
}

""" Defines the payload for setting the image of an item """
type ItemImageSetPayload {
    """ The updated image data structure """
    item : Item!
}

""" Defines the payload for removing the image of an item """
type ItemImageRemovePayload {
    """ A notification if the deletion was successfull """
    success : Boolean!
}

""" A Positional marker that needs to be visualized at a specific value of a slider / regulator (can be seen as a breakpoint for giving visual / textual feedback and orientation) """
type Label {
    """ The unique identifier """
    id : HashID!

    """ The data structure of the image that visualy represents the marker and needs to be shown """
    image : ImageData

    """ A text that explains / represents the marker and needs to be shown """
    label : String

    """ The value a label has to be placed at """
    value : Float
}

""" Defines the input for creating a label """
input LabelCreateInput {
    """ A text that explains / represents the marker and needs to be shown """
    label : String

    """ The value a label has to be placed at """
    value : Float
}

""" Defines the payload for creating a label """
type LabelCreatePayload {
    """ The created label data structure """
    label : Label!
}

""" Defines the input for updating an label """
input LabelUpdateInput {
    """ A new text that explains / represents the marker and needs to be shown """
    label : String

    """ The new value a label has to be placed at """
    value : Float
}

""" Defines payload for updating an label """
type LabelUpdatePayload {
    """ The updated label data structure """
    label : Label!
}

""" Defines payload for deleting an item """
type LabelDeletePayload {
    """ A notification if the deletion was successfull """
    success : Boolean!
}

""" Defines the payload for setting the image of a label """
type LabelImageSetPayload {
    """ The updated label data structure """
    label : Label!
}

""" Defines the payload for removing the image of a label """
type LabelImageRemovePayload {
    """ A notification if the deletion was successfull """
    success : Boolean!
}

""" The data structure of one possible choice / answer option """
type ChoiceDescription {
    """ The unique identifier """
    id : HashID!

    """ The data structure of the image that visualy represents the choice and needs to be shown / selectable """
    image : ImageData

    """ A text that explains / represents the choice and needs to be shown / selectable """
    label : String

    """ A unique string representing each choice (often a shorter version of the label for visualizations) """
    code : String!
}

""" Defines the input for creating a choice description """
input ChoiceDescriptionCreateInput {
    """ A text that explains / represents the choice and needs to be shown / selectable """
    label : String

    """ A unique string representing each choice (often a shorter version of the label for visualizations) """
    code : String!
}

""" Defines the payload for creating a choice """
type ChoiceDescriptionCreatePayload {
    """ The created choice data structure """
    choice : ChoiceDescription!
}

""" Defines the input for updating a choice """
input ChoiceDescriptionUpdateInput {
    """ A new text that explains / represents the choice and needs to be shown / selectable """
    label : String

    """ A new unique string representing each choice (often a shorter version of the label for visualizations) """
    code : String!
}

""" Defines the payload for updating a choice """
type ChoiceDescriptionUpdatePayload {
    """ The updated choice data structure """
    choice : ChoiceDescription!
}

""" Defines the payload for deleting an choice """
type ChoiceDescriptionDeletePayload {
    """ A notification if the deletion was successfull """
    success : Boolean!
}

""" Defines the payload for setting the image of a choice """
type ChoiceImageSetPayload {
    """ The updated choice data structure """
    choice : ChoiceDescription!
}

""" Defines the payload for removing the image of a choice """
type ChoiceImageRemovePayload {
    """ A notification if the deletion was successfull """
    success : Boolean!
}
