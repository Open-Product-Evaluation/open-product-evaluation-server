type Query {
    """
    * __Roles:__ Admin / User
    * __Function:__ Returns an array of user-objects or null
        * _**Admin:**_ Returns all users
        * _**User:**_ Only returns the own user-object
    * __Error:__ Returns an error when
        * access rights are missing
        * there are no users found (when using filters)
    """
    users(pagination: Pagination, sortBy: [UserSortParameter!], filterBy: Filter) : [User!]


    """
    * __Roles:__ Admin / User
    * __Function:__ Returns the specified user
    * __Error:__ Returns an error when
        * access rights are missing
        * a standard user requests another user
        * the provided userID is invalid / the user was not found
    """
    user(userID : HashID!) : User!

    """
    * __Roles:__ Admin / User
    * __Function:__ Returns the amount of viewable users
        * _**Admin:**_ Returns the amount of all users
        * _**User:**_ Returns 1
    * __Error:__ Returns an error when
        * access rights are missing
    """
    userAmount : Int
}

type Mutation {
    """
    * __Roles:__ No Authorization required
    * __Function:__ Creates a user
    * __Error:__ Returns an error when
        * the provided email is already taken
    """
    createUser(data : UserCreateInput!) : UserCreatePayload!


    """
    * __Roles:__ Admin / User
    * __Function:__ Updates a user
        * _**Admin:**_ Can update all users
        * _**User:**_ Can only update himself
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified user was not found
        * the provided email is already taken
        * a standard user tries to update another user
    """
    updateUser(data : UserUpdateInput!, userID : HashID!) : UserUpdatePayload!


    """
    * __Roles:__ Admin / User
    * __Function:__ Deletes a user
        * _**Admin:**_ Can delete all users
        * _**User:**_ Can only delete himself
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified user was not found
        * a standard user tries to delete another user
    """
    deleteUser(userID : HashID!) : UserDeletePayload!


    """
    * __Roles:__ No Authorization required
    * __Function:__ Login as the requested user
    * __Error:__ Returns an error when
        * the specified user was not found
        * the email and / or password arent matching
    """
    login(data : LoginInput!) : LoginPayload!
}

type Subscription {
    """
    * __Roles:__ Admin / User
    * __Function:__ Subscribe to all updates of a user-object (UPDATE / DELETE-events)
        * _**Admin:**_ Can subscribe to all users
        * _**User:**_ Can only subscribe to himself
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified user was not found
        * a standard user tries to subscribe another user
    """
    userUpdate(userID : HashID!) : UserUpdateSubscriptionPayload!
}

""" All attributes users can be sorted by """
enum SortableUserField {
    CREATION_DATE
    LAST_UPDATE
    FIRST_NAME
    LAST_NAME
    EMAIL
    IS_ADMIN
}

""" Defines the attribute users are sorted by, as well as the order """
input UserSortParameter {
    """ The attribute """
    fieldName : SortableUserField!

    """ The order """
    sortOption : SortOption!
}

""" Defines a user of the Adminview. A user can create Surveys as well as Domains and is allowed to manage these entities. Users can also be set as the owner of a Client. In this case they are also allowed to manage those Clients."""
type User {
    """ The unique identifier """
    id : HashID!

    """ The date of creation """
    creationDate : DateTime!

    """ The date of the last update """
    lastUpdate : DateTime!

    """ The first name """
    firstName : String!

    """ The last name """
    lastName : String!

    """ The email used for the Login (can only be used for a single user) """
    email : String!

    """ The admin-flag (true = user is admin) """
    isAdmin : Boolean!
}

""" Defines the input for creating a user """
input UserCreateInput {

    """ The first name """
    firstName : String!

    """ The last name """
    lastName : String!

    """ The email used for the Login (can only be used for a single user) """
    email : String!

    """ The password used for the Login """
    password : String!
}

""" Defines the payload when creating a user """
type UserCreatePayload {

    """ The created user data structure """
    user : User!

    """ The JWT to authorize requests of this user (needs to be added as Authorization-header for every request. 'Authorization': 'Bearer token') """
    token : String!
}

""" Defines the input for updating a user """
input UserUpdateInput {

    """ Replaces the first name if provided """
    firstName : String

    """ Replaces the last name if provided """
    lastName : String

    """ Replaces the email if provided (still needs to be unique) """
    email : String

    """ Replaces the password if provided """
    password : String

    """ Provide a user admin rights or revoke them (only admins can do that) """
    isAdmin: Boolean
}

""" Defines the payload for updating a user """
type UserUpdatePayload {

    """ The updated user data structure """
    user : User!
}

""" Defines the payload for deleting a user """
type UserDeletePayload {

    """ A notification if the deletion was successfull """
    success : Boolean!
}

""" Defines the input for a login """
input LoginInput {

    """ The email of the user """
    email : String!

    """ The password of the user """
    password : String!
}

""" Defines the payload for a login """
type LoginPayload {

    """ The current user data structure """
    user : User!

    """ The JWT to authorize requests of this user (needs to be added as Authorization-header for every request. 'Authorization': 'Bearer token') """
    token : String!
}

""" Defines the payload when subscribing to the changes of a user """
type UserUpdateSubscriptionPayload {
    """ The action that was performed on a user data structure (UPDATE, DELETE) """
    event: String!

    """ The attributes that were changed (only if the event is UPDATE) """
    changedAttributes: [String!]

    """ The updated or deleted user data structure """
    user: User
}
