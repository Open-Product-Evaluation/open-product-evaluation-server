""" Defines to GraphQL Queries """
type Query {
    """
    * __Roles:__ Admin / User
    * __Function:__ Returns an array of survey-objects or null
        * _**Admin:**_ Returns all surveys
        * _**User:**_ Only returns the surveys this user created himself
    * __Error:__ Returns an error when
        * access rights are missing
        * there are no surveys found
    """
    surveys(pagination: Pagination, sortBy: [SurveySortParameter!], filterBy: Filter) : [Survey!]


    """
    * __Roles:__ Admin / User
    * __Function:__ Returns the specified survey
    * __Error:__ Returns an error when
        * access rights are missing
        * a standard user requests the survey of another user
        * the provided surveyID is invalid / the survey was not found
    """
    survey(surveyID : HashID!) : Survey!

    """
    * __Roles:__ Admin / User
    * __Function:__ Returns the amount of viewable surveys
        * _**Admin:**_ Returns the amount of all surveys
        * _**User:**_ Returns the amount of surveys the user created himself
    * __Error:__ Returns an error when
        * access rights are missing
    """
    surveyAmount : Int
}

""" Defines the GraphQL Mutations """
type Mutation {
    """
    * __Roles:__ Admin / User
    * __Function:__ Creates the skeletal structure of a survey that can be further filled by updates
    * __Error:__ Returns an error when
        * access rights are missing
    """
    createSurvey(data : SurveyCreateInput!) : SurveyCreatePayload!


    """
    * __Roles:__ Admin / User
    * __Function:__ Updates a survey
        * _**Admin:**_ Can update all surveys
        * _**User:**_ Can only update surveys created by himself
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified survey was not found
        * a standard user tries to update another user's survey
    """
    updateSurvey(data : SurveyUpdateInput!, surveyID : HashID!) : SurveyUpdatePayload!


    """
    * __Roles:__ Admin / User
    * __Function:__ Deletes a survey
        * _**Admin:**_ Can delete all surveys
        * _**User:**_ Can only delete surveys he created himself
    * __Error:__ Returns an error when
        * access rights are missing
        * the specified survey was not found
        * a standard user tries to delete another user's surveys
    """
    deleteSurvey(surveyID : HashID!) : SurveyDeletePayload!
}

""" All attributes surveys can be sorted by """
enum SortableSurveyField {
    CREATION_DATE
    LAST_UPDATE
    CREATOR
    TITLE
    IS_ACTIVE
}

""" Defines the attribute surveys are sorted by, as well as the order """
input SurveySortParameter {
    """ The attribute """
    fieldName : SortableSurveyField!

    """ The order """
    sortOption : SortOption!
}

""" The survey-object is the skeletal structure of a poll. It is created by a user in the administration UI and can be filled with questions. If a survey is set to active, it can be assigned to a domain. Every client that is in or joines this domain is now allowed to answer this poll. """
type Survey {
    """ The unique identifier """
    id : HashID!

    """ The date of creation """
    creationDate : DateTime!

    """ The date of the last update """
    lastUpdate : DateTime!

    """ The user that created this survey """
    creator : User

    """ The title of this survey, revealing its context """
    title : String!

    """ The description of this survey, giving deeper insights about it """
    description : String

    """ The Flag to determine if the Survey is active (can be assigned to a domain and voted on). Only if it is inactive a survey can be updated (defaults to inactive and should be left there until questions were created) """
    isActive : Boolean!

    """ All the QuestionTypes this survey contains """
    types : [QuestionType!]

    """ All the questions of this survey """
    questions : [Question!]

    """ All the results of this survey """
    results : Results!

    """ All the domains of this survey is assigned to """
    domains : [Domain!]

    """ An image used for previewing this survey """
    previewImage : ImageData
}

""" Defines the input for creating a survey """
input SurveyCreateInput {
    """ The title of this survey, revealing its context """
    title : String!

    """ The description of this survey, giving deeper insights about it """
    description : String = " "

    """ The Flag to determine if the Survey is active (can be assigned to a domain and voted on). Only if it is inactive a survey can be updated (defaults to inactive and should be left there until questions were created) """
    isActive : Boolean = false
}

""" Defines the payload for creating a survey """
type SurveyCreatePayload {

    """ The created survey data structure """
    survey: Survey!
}

""" Defines the input for updating a survey """
input SurveyUpdateInput {

    """ The title of this survey, revealing its context """
    title : String

    """ The description of this survey, giving deeper insights about it """
    description : String

    """ The Flag to determine if the Survey is active (can be assigned to a domain and voted on). Only if it is inactive a survey can be updated (defaults to inactive and should be left there until questions were created) """
    isActive : Boolean

    """ The prefered sequence of questions (all present questionIDs need to be provided / not for adding new questions) """
    questionOrder : [HashID!]
}

""" Defines the payload for updating a survey """
type SurveyUpdatePayload {

    """ The updated survey data structure """
    survey : Survey!
}

""" Defines the payload for deleting a survey """
type SurveyDeletePayload {

    """ A notification if the deletion was successfull """
    success : Boolean!
}
