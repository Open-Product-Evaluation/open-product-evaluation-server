""" Defines to GraphQL Queries """
type Query {
    """ Returns a list of Domains the user is allowed to see """
    domains(types : [QuestionType!]) : [Domain!]


    """ Returns the specified Domain """
    domain(domainID : ID!) : Domain!


    """ Returns the specified state of a domain """
    state(domainID : ID!, key : String!) : State!
}

""" Defines the GraphQL Mutations """
type Mutation {
    """ Creates a Domain and returns the created Domain data """
    createDomain(data : DomainCreateInput) : DomainCreatePayload!


    """ Updates the specified Domain and returns the updated Domain data """
    updateDomain(data : DomainUpdateInput!, domainID : ID!) : DomainUpdatePayload!


    """ Deletes the specified Domain and returns the deleted Domain data """
    deleteDomain(domainID : ID!) : DomainDeletePayload!


    """ Creates a State for a controller and returns the created State data """
    createState(data : StateCreateInput!, domainID : ID!) : StateCreatePayload!


    """ Updates the specified State and returns the updated State data """
    updateState(data : StateUpdateInput!, domainID : ID!) : StateUpdatePayload!


    """ Deletes the specified State and returns the deleted State data """
    deleteState(data : StateDeleteInput!, domainID : ID!) : StateDeletePayload!


    """ Adds a new user as the owner of a domain. The email of the user needs to be provided. """
    setDomainOwner(owner: String!, domainID : ID!) : DomainSetOwnerPayload!

    """ Removes an owner from a domain. """
    removeDomainOwner(owner: ID!, domainID : ID!) : DomainRemoveOwnerPayload!
}

""" Defines the GraphQL Subscriptions """
type Subscription {
    """ Subscribe a specific Domain """
    domainUpdate(domainID : ID!) : DomainUpdateSubscriptionPayload!
}

""" Defines a Domain representing a survey instance """
type Domain {
    """ Unique controllerID """
    id : ID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ Optional: The active question displayed by the domain """
    activeQuestion : Question

    """ Optional: The active survey handled by the domain """
    activeSurvey : Survey

    """ The users the client is connected to """
    owners : [User!]

    """ All clients connected to the domain """
    clients : [Client!]

    """ The name of the domain """
    name : String!

    """ List of controller defined states """
    states : [State!]
}

""" Defines the input to create a domain """
input DomainCreateInput {
    """ the name """
    name : String!
}

""" Defines the payload to create a domain """
type DomainCreatePayload {

    """ the domain """
    domain : Domain!
}

""" Defines the input to  """
input DomainUpdateInput {

    """ the active questionID """
    activeQuestion : ID

    """ the active surveyID """
    activeSurvey : ID

    """ the domain name """
    name : String
}

""" Defines the payload to update a domain """
type DomainUpdatePayload {

    """ the domain data """
    domain : Domain!
}

""" Defines the payload to setting an owner of a domain """
type DomainSetOwnerPayload {

    """ the domain data """
    domain : Domain!
}

""" Defines the payload to delete a domain """
type DomainDeletePayload {

    """ the domain data """
    success: Boolean!
}


""" Defines the payload to removing an owner from a domain """
type DomainRemoveOwnerPayload {

    """ the domain data """
    domain: Domain!
}

""" Key-value pairs representing a client state """
type State {

    """ the key """
    key : String!

    """ the value """
    value : String!
}

""" Defines the input to create a state """
input StateCreateInput {

    """ the key """
    key : String!

    """ the value """
    value : String!
}

""" Defines the payload to create a state """
type StateCreatePayload {

    """ the state """
    state : State!
}

""" Defines the input to update a state """
input StateUpdateInput {

    """ the key """
    key : String!

    """ the value """
    value : String!
}

""" Defines the payload to update state """
type StateUpdatePayload {

    """ the state to update """
    state : State!
}

""" Defines the input to delete a state """
input StateDeleteInput {

    """ the key """
    key : String!
}

""" Defines the payload to delete state """
type StateDeletePayload {

    """ the state to delete """
    success: Boolean!
}

""" Defines the payload to subscribing a domain """
type DomainUpdateSubscriptionPayload {
    """ the event: UPDATE, INSERT or DELETE """
    event: String!

    """ changed attributes of this domain """
    changedAttributes: [String!]

    """ key of changed state (only if a state got changed, inserted or delted) """
    stateKey: String

    """ The updated Domain (not if event is DELETE) """
    domain: Domain
}
