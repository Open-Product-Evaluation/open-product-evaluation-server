""" Defines to GraphQL Queries """
type Query {
    """  Returns a list of Clients """
    clients(pagination: Pagination, sortBy: [ClientSortParameter!], filterBy: Filter) : [Client!]

    """ Returns the specified Client """
    client(clientID : HashID!) : Client!

    """ Returns the amount of available Clients """
    clientAmount : Int
}

""" Defines the GraphQL Mutations """
type Mutation {
    """ Permanent Clients login to get their Data representation, as well as their jwt Token """
    loginClient(data: ClientLoginInput!) : ClientLoginPayload!

    """ Creates a permanent Client that gets assigned to a user and will be persistet until it gets deleted by itself or its user. Returns the created Client data """
    createPermanentClient(data : PermanentClientCreateInput!) : PermanentClientCreatePayload!

    """ Creates a temporary Client that is allowed to answer one survey and then automatically gets deleted. Returns the created Client data """
    createTemporaryClient(data : ClientCreateInput!) : ClientCreatePayload!

    """ Updates the specified permanent Client and returns the Client data """
    updateClient(data : ClientUpdateInput!, clientID : HashID!) : ClientUpdatePayload!

    """ Deletes the specified Client and returns the Client data """
    deleteClient(clientID : HashID!) : ClientDeletePayload!

    """ Adds a new user as the owner of a client. The email of the user needs to be provided. """
    setClientOwner(clientID : HashID!, email: String!) : ClientOwnerSetPayload!

    """ Removes an owner from a client. """
    removeClientOwner(clientID : HashID!, ownerID: HashID!) : ClientOwnerRemovePayload!
}

""" Defines the GraphQL Subscriptions """
type Subscription {
    """ Subscribe a specific Client """
    clientUpdate(clientID : HashID!) : ClientUpdateSubscriptionPayload!
}

enum SortableClientField {
    CREATION_DATE
    LAST_UPDATE
    NAME
    DOMAIN
    OWNERS
}

input ClientSortParameter {
    fieldName : SortableClientField!
    sortOption : SortOption!
}

""" Defines a client """
type Client {
    """ Unique clientID """
    id : HashID!

    """ Date of creation """
    creationDate : DateTime!

    """ Date of last update """
    lastUpdate : DateTime!

    """ The name of the client """
    name : String!

    """ The domain the client is connected to """
    domain : Domain

    """ The users the client is connected to """
    owners : [User!]
}

""" Defines the input to create a permanent Client """
input ClientLoginInput {
    """ the login Code the desired Client got when created """
    code : String!

    """ the email of the user this clieent belongs to """
    email : String!
}

""" Defines the payload to logging in a permanent client """
type ClientLoginPayload {
    """ the created client """
    client : Client!

    """ The Code that serves as a password for permanent Clients when logging in """
    code : String

    """ the JWT-Token for that client """
    token : String!
}

""" Defines the input to create a permanent Client """
input PermanentClientCreateInput {
    """ the client name """
    name : String!

    """ the email of the user this clieent belongs to """
    email : String!
}

""" Defines the payload to create a client """
type PermanentClientCreatePayload {
    """ the created client """
    client : Client!

    """ The Code that serves as a password for permanent Clients when logging in """
    code : String

    """ the JWT-Token for that client """
    token : String!
}

""" Defines the input to create a temporary Client """
input TemporaryClientCreateInput {
    """ the ID of the Domain this Client gets connected to """
    domainID : HashID!
}

""" Defines the payload to create a client """
type TemporaryClientCreatePayload {
    """ the created client """
    client : Client!

    """ the JWT-Token for that client """
    token : String!
}

""" Defines the input to update a client """
input ClientUpdateInput {

    """ the client name """
    name : String

    """ the associated domain """
    domain : HashID
}

""" Defines the payload to update a client """
type ClientUpdatePayload {

    """ the client data """
    client : Client!
}

""" Defines the payload to setting an owner of a client """
type ClientOwnerSetPayload {

    """ the client data """
    client : Client!
}

""" Defines the payload to delete a client """
type ClientDeletePayload {

    """ the client data """
    success: Boolean!
}

""" Defines the payload to removing an owner from a client """
type ClientOwnerRemovePayload {

    """ information if the owner was removed """
    success : Boolean!
}

type ClientUpdateSubscriptionPayload {
    event: String!
    changedAttributes: [String!]
    client: Client
}
